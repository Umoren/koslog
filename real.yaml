app:
  title: Koslog Backstage
  baseUrl: http://localhost:3000

organization:
  name: Koslog Engineering

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  reading:
    allow:
      - host: raw.githubusercontent.com
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: pg
    connection:
      host: localhost
      port: 5432
      user: postgres
      password: secret
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      token: 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
      # apps:
      #   - $include: github-app-koslog-backstage-credentials.yaml
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # '/test':
  #   target: 'https://example.com'
  #   changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'external' # Alternatives - 'external'
  publisher:
    type: 'awsS3' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
    awsS3:
      bucketName: 'techdocsbucket-365'
      accountId: '221262183359'
      region: 'us-east-1'
      bucketRootPath: '/'
      s3ForcePathStyle: false

aws:
  accounts:
    - accountId: '221262183359'
      accessKeyId: 'AKIATHBCA7O7Y5VEQLO7'
      secretAccessKey: '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'

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    github:
      development:
        clientId: b760ac5105fa2d7d7bfa
        clientSecret: 97d93601bd8b2e6e94103f157f2349c3c29aba8f

scaffolder:
  defaultAuthor:
    name: 'Koslog'
    email: 'samuelumoren365@gmail.com'
  defaultCommitMessage: 'New component: ${componentId}'

stackoverflow:
  baseUrl: https://api.stackexchange.com/2.2


search:
  pg:
    highlightOptions:
      useHighlight: true
      maxWord: 35 # Used to set the longest headlines to output. The default value is 35.
      minWord: 15 # Used to set the shortest headlines to output. The default value is 15.
      shortWord: 3 # Words of this length or less will be dropped at the start and end of a headline, unless they are query terms. The default value of three (3) eliminates common English articles.
      highlightAll: false # If true the whole document will be used as the headline, ignoring the preceding three parameters. The default is false.
      maxFragments: 0 # Maximum number of text fragments to display. The default value of zero selects a non-fragment-based headline generation method. A value greater than zero selects fragment-based headline generation (see the linked documentation above for more details).
      fragmentDelimiter: ' ... ' # Delimiter string used to concatenate fragments. Defaults to " ... ".
catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../docs-template/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../vue-backstage-template/template.yaml
      rules:
        - allow: [Template]


